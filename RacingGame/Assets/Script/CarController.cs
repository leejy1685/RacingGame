using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class CarController : MonoBehaviour
{
    //움직임 제어
    public Rigidbody theRB;
    private float speedInput, turnInput;
    //조작 수치
    public float forwardAccel = 8f, reverseAccel = 4f, maxSpeed = 50f, turnStrength = 180, gravityForce = 10f, dragOnGround = 3f ;
    //바닥에 닿지 않았을 때 마찰력 제어
    private bool grounded;
    //바닥에 닿는거 판단
    public LayerMask whatIsGround;
    public float groundRayLength = .5f;
    public Transform groundRayPoint;
    //앞 바퀴 돌리는 디테일 구현
    public Transform leftFrontWheel, rightFrontWheel;
    public float maxWheelTurn = 25f;
    //달릴 때 먼지 날리는 거 구현
    public ParticleSystem[] dustTrail;
    public float maxEmission = 25f;
    private float emissionRate;
    //소리 구현
    private SoundManager sm;
    //차 컨트롤 가능 불가능
    GameManager playMng;


    private void Start()
    {
        DontDestroyOnLoad(gameObject);
        //구체 독립
        theRB.transform.parent = null;
    }
    private void Update()
    {
        if(sm == null)
            sm = GameObject.Find("SoundManager").GetComponent<SoundManager>();
        if(playMng == null)
            playMng = GameObject.Find("playManager").GetComponent<GameManager>();

        //구체 따라가기
        transform.position = theRB.transform.position;

        //속도 조작
        speedInput = 0;
        if (Input.GetKey(KeyCode.UpArrow))
        {
            speedInput = forwardAccel * 1000f;
        }
        else if (Input.GetKey(KeyCode.DownArrow))
        {
            speedInput =  reverseAccel * 1000f;
        }
        
        //소리 조작
        if(theRB.velocity != new Vector3(0, 0, 0))
        {
            sm.idleStop();
            sm.runningPlay();
        }
        else
        {
            sm.runningStop();
            sm.idlePlay();
        }



        turnInput = Input.GetAxis("Horizontal");
        //땅에 닿아 있을 때만 회전 가능
        if(grounded)
            transform.rotation = Quaternion.Euler(transform.rotation.eulerAngles + new Vector3(0f, turnInput * turnStrength * Time.deltaTime* Input.GetAxis("Vertical"), 0f));
        //앞 바퀴 조절
        leftFrontWheel.localRotation = Quaternion.Euler(leftFrontWheel.localRotation.eulerAngles.x, turnInput * maxWheelTurn, leftFrontWheel.localRotation.eulerAngles.z);
        rightFrontWheel.localRotation = Quaternion.Euler(rightFrontWheel.localRotation.eulerAngles.x, turnInput * maxWheelTurn, rightFrontWheel.localRotation.eulerAngles.z);

        //래프트 컨트롤로 속도 조절
        if (Input.GetKeyDown(KeyCode.LeftControl))
        {
            forwardAccel--;
            StartCoroutine(sm.BoostPlay());
        }
        if (forwardAccel < -8 || Input.GetKeyUp(KeyCode.UpArrow))
            forwardAccel = -4;




        //드리프트 구현
        if (Input.GetKey(KeyCode.LeftShift))
        {
            theRB.mass = 120;
            theRB.drag = 300;
            turnStrength = 270;
            if (Input.GetKey(KeyCode.LeftArrow) || Input.GetKey(KeyCode.LeftArrow))
                sm.DriftPlay();
        }
        if(Input.GetKeyUp(KeyCode.LeftShift))
        {
            theRB.mass = 70;
            theRB.drag = 3;
            turnStrength = 180;
            sm.DriftStop();
        }

    }

    private void FixedUpdate()
    {
        //바닥에 닿는거 판단
        grounded = false;
        RaycastHit hit;

        if (Physics.Raycast(groundRayPoint.position, -transform.up, out hit, groundRayLength, whatIsGround))
        {
            grounded = true;

            transform.rotation = Quaternion.FromToRotation(transform.up, hit.normal) * transform.rotation;
        }

        emissionRate = 0;
        //달리는 거, 마찰력 조절 구현
        if (grounded)
        {
            theRB.drag = dragOnGround;
            if (Mathf.Abs(speedInput) > 0 && playMng.getCarActive())
            {
                theRB.AddForce(transform.forward * speedInput);
                emissionRate = maxEmission;
            }

        }
        else
        {
            theRB.drag = 0.1f;
            theRB.AddForce(Vector3.up * -gravityForce * 100f);
        }
        //달릴 때 먼지 구현
        foreach (ParticleSystem part in dustTrail)
        {
            var emissionModule = part.emission;
            emissionModule.rateOverTime = emissionRate;

        }


    }

    public float getForwardAccel() { return forwardAccel; }

}
